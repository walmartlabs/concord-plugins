flows:
  default:
    - form: argocdParams
      yield: true

    - expr: ${evalAsMap(argocdParams)}
      out: argocdParams

    - log: ${argocdParams}

    - task: argocd
      in:
        action: sync
        app: ${argocdParams.app}
        revision: ${argocdParams.revision}
        dryRun: ${argocdParams.dryRun}
        prune: ${argocdParams.prune}
        retryStrategy: "${argocdParams.retryStrategy.limit > 0 ? argocdParams.retryStrategy : null}"
        strategy: ${argocdParams.syncStrategy}
        watchHealth: ${argocdParams.watchHealth}
        debug: ${argocdParams.debug}
        baseUrl: ${defaults.baseUrl}
        auth: ${defaults.auth}
        validateCerts: ${defaults.validateCerts}
        syncTimeout: ${defaults.syncTimeout}
      out: syncResult

    - log: ${syncResult}

forms:
  argocdParams:
    - app: { label: "Application name", type: "string", placeholder: "Place Application name here", value: "hello-app" }
    # Sync to a specific revision
    - revision: { label: "Git revision", type: "string?", placeholder: "Place Git revision here" }
    # Sync timeout (ISO-8601 duration format)
    - syncTimeout: { label: "Sync timeout", type: "string?", placeholder: "Place Sync timeout here" }
    # Debug
    - debug: { label: "Debug task", type: "boolean", value: false }
    # Preview apply without affecting cluster
    - dryRun: { label: "Dry Run", type: "boolean", value: false }
    # Allow deleting unexpected resources
    - prune: { label: "Prune", type: "boolean", value: false }
    # Wait until application is healthy
    - watchHealth: { label: "Wait Healthy", type: "boolean", value: false }
    # Contains information about the strategy to apply when a sync failed
    ## Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
    - retryStrategy.limit: { label: "Retry Strategy Limit", type: "int?" }
    ## Backoff is the backoff strategy to use on subsequent retries for failing syncs
    ### Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
    - retryStrategy.backoff.duration: { label: "Retry Backoff Duration", type: "string?"}
    ### Factor is a factor to multiply the base duration after each failed retry
    - retryStrategy.backoff.factor: { label: "Retry Backoff Factor", type: "string?"}
    ### MaxDuration is the maximum amount of time allowed for the backoff strategy
    - retryStrategy.backoff.maxDuration: { label: "Retry Backoff Max Duration", type: "string?"}
    # SyncStrategy controls the manner in which a sync is performed
    ## SyncStrategyApply uses `kubectl apply` to perform the apply
    ### Force indicates whether or not to supply the --force flag to kubectl apply. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
#    - syncStrategy.apply.force: { label: "Sync Strategy Apply Force", type: "boolean", value: false }
    ### SyncStrategyHook will perform a sync using hooks annotations. If no hook annotation is specified falls back to kubectl apply.
#    - syncStrategy.hook.syncStrategyApply.force: { label: "Sync Strategy Hook Force", type: "boolean", value: false }

configuration:
  runtime: concord-v2
  dependencies:
    - mvn://com.walmartlabs.concord.plugins:argocd-task:1.54.0-SNAPSHOT
  arguments:
    defaults:
      baseUrl: "https://argocd.demo.com:30443"  # replace with actual url
      auth:
        basic:
          # username:
          # password:
      validateCerts: false