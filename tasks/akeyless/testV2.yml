configuration:
  runtime: concord-v2
  dependencies:
    - mvn://com.walmartlabs.concord.plugins:akeyless-task:1.42.1-SNAPSHOT
  arguments:
    akeylessParams:
      apiBasePath: 'https://api.akeyless.io'
      debug: true
      auth:
        apiKey:
          accessId: { org: 'Default', name: 'dev-akeyless-id' }
          accessKey: { org: 'Default', name: 'dev-akeyless-key' }
    testData:
      path1: "/concord_validation/secret1"
      path2: "/concord_validation/secret2"

flows:
  testParallel:
    - parallel:
        - log: "result1: ${akeyless.getSecret('/second-secret')}"
        - log: "result2: ${akeyless.getSecret('/second-secret')}"
        - log: "result3: ${akeyless.getSecret('/second-secret')}"
        - log: "result4: ${akeyless.getSecret('/second-secret')}"
        - log: "result5: ${akeyless.getSecret('/second-secret')}"

  default:
    # Get an API access token
    - name: "Get API access token"
      task: akeyless
      in:
        action: auth
      out: authResult
    - if: "${!authResult.ok}"
      then:
        - throw: "Failed to get access token: ${authResult.error}"
    - "${akeylessParams.put('accessToken', authResult.data.accessToken)}"


    # Create two secrets
    - name: "Create first secret"
      task: akeyless
      in:
        action: createSecret
        path: "${testData.path1}"
        value: "value1"
        description: "Description for secret 1"
        multiline: false
    - name: "Create second secret"
      task: akeyless
      in:
        action: createSecret
        path: "${testData.path2}"
        value: "value2"
        description: "Description for secret 2"
        multiline: false


    # Get and validate one secret
    - name: "Get secret and validate data"
      task: akeyless
      in:
        action: getSecret
        path: "${testData.path1}"
      out: singleGetData
    - call: assertEqual
      in: { expected: "value1", actual: "${singleGetData.data[testData.path1]}" }


    # Again, with the public method
    - name: "Get secret with public method"
      call: assertEqual
      in: { expected: "value1", actual: "${akeyless.getSecret(testData.path1)}" }


    # Get and validate two secrets
    - name: "Get and validate multiple secrets"
      task: akeyless
      in:
        action: getSecrets
        paths:
          - "${testData.path1}"
          - "${testData.path2}"
      out: multiGetData
    - call: assertEqual
      in: { expected: "value1", actual: "${multiGetData.data[testData.path1]}" }
    - call: assertEqual
      in: { expected: "value2", actual: "${multiGetData.data[testData.path2]}" }


    # Cleanup. Delete the secrets
    - name: "Delete first secret"
      task: akeyless
      in:
        action: deleteItem
        path: "${testData.path1}"
        deleteImmediately: true
    - name: "Delete second secret"
      task: akeyless
      in:
        action: deleteItem
        path: "${testData.path2}"
        deleteImmediately: true

  assertEqual:
    - if: "${expected != actual}"
      then:
        - throw: "Got unexpected data: ${expected} != ${actual}"
